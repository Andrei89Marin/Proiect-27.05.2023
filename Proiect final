import unittest
import time
from selenium import webdriver
from selenium.webdriver.common.by import By

from selenium.webdriver.chrome.webdriver import WebDriver
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait


class Login(unittest.TestCase):

    def login_click(self, username, password):
        self.chrome.find_element(By.NAME, 'username').send_keys(username)
        self.chrome.find_element(By.NAME, 'password').send_keys(password)
        self.chrome.find_element(By.TAG_NAME, "i").click()

    def click_login(self):
        self.chrome.find_element(By.TAG_NAME, "i").click()

    def click_logout(self):
        self.chrome.find_element(By.XPATH, '//a [@class = "button secondary radius"]').click()

    def setUp(self):
        self.chrome: webdriver = webdriver.Chrome()
        self.chrome.get('https://the-internet.herokuapp.com/')
        self.chrome.find_element(By.LINK_TEXT, 'Form Authentication').click()

    def tearDown(self):
        self.chrome.quit()

    def test_verificare_url(self):
        actual = self.chrome.current_url
        expected = 'https://the-internet.herokuapp.com/login'
        self.assertEqual(actual, expected, 'Link-urile NU sunt la fel')

    def test_verificare_page_title(self):
        actual = self.chrome.find_element(By.TAG_NAME, "h2").text
        expected = "Login Page"
        self.assertEqual(actual, expected, "Titulul de pe pagina este diferit de ceea ce ne asteptam")

    def test_verificare_test(self):
        actual = self.chrome.find_element(By.XPATH, "//h2").text
        expected = "Login Page"
        self.assertEqual(actual, expected, "Textul afisat nu e corect")

    def test_verificare_buton(self):
        actual = self.chrome.find_element(By.TAG_NAME, "i").text
        expected = "Login"
        self.assertEqual(expected, actual, "Butonul de login nu e afisat in pagina")

    def test_verificare_atribut_href(self):
        actual = self.chrome.find_element(By.LINK_TEXT, "Elemental Selenium").get_attribute('href')
        expected = 'http://elementalselenium.com/'
        self.assertEqual(actual, expected, "Atributul href al linkului ‘Elemental Selenium’ NU corect")

    def test_verificare_eroare_display(self):
        self.login_click('', '')
        actual = self.chrome.find_element(By.XPATH, '//div[@class="flash error"]')
        self.assertTrue(actual.is_displayed(), "Mesajul de eroare NU este afisat")

    def test_verificare_measaj_eroare(self):
        self.login_click('alabala', 'alabala')
        actual = self.chrome.find_element(By.XPATH, '//div[@class="flash error"]').text
        expected = 'Your username is invalid!'
        self.assertTrue(expected in actual, 'Error message text is incorrect')

    def test_verificare_eroare(self):
        self.login_click('', '')
        self.chrome.maximize_window()
        self.chrome.find_element(By.CLASS_NAME, "close").click()
        expected = self.chrome.find_element(By.XPATH, '// div[@class = "flash error"]')
        self.assertTrue(expected.is_displayed(), "Eroarea este afisata")

    def test_verificare_date(self):
        lista_label = self.chrome.find_elements(By.XPATH, "//label")
        assert lista_label[0].text == "Username"
        assert lista_label[1].text == "Password"

    def test_verifica_url_nou(self):
        self.login_click('tomsmith', 'SuperSecretPassword!')
        actual = self.chrome.current_url
        expected = 'https://the-internet.herokuapp.com/secure'
        self.assertEqual(actual, expected, "Noul NU url contine '/secure sau este diferit '")

        WebDriverWait(self.chrome, 3).until(
            expected_conditions.presence_of_element_located((By.XPATH, "//div[@class = 'flash success']")))
        flash_succes = self.chrome.find_element(By.XPATH, "//div[@class = 'flash success']")
        actual = flash_succes.text
        expected = 'secure area!'
        self.assertTrue(flash_succes.is_displayed(), "Elementul nu este afisat")
        self.assertTrue(expected in actual, "Mesajul nu contine 'secure arena'")

    def test_verificare_url_final(self):
        self.login_click('tomsmith', 'SuperSecretPassword!')
        self.click_logout()
        actual = self.chrome.current_url
        expected = 'https://the-internet.herokuapp.com/login'
        self.assertEqual(actual, expected, 'Nu ne-am putut deloga')

